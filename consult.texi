\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename consult.info
@settitle consult.el - Consulting completing-read
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@dircategory Emacs
@direntry
* Consult: (consult).   Useful commands built on completing-read.
@end direntry

@finalout
@titlepage
@title consult.el - Consulting completing-read
@author Daniel Mendler
@end titlepage

@contents

@ifnottex
@node Top
@top consult.el - Consulting completing-read
@end ifnottex

@menu
* Introduction::                 Why Consult?
* Available commands::           Navigation, search, editing commands and more
* Special features::             Enhancements over built-in `completing-read'
* Configuration::                Example configuration and customization variables
* Recommended packages::         Related packages recommended for installation
* Acknowledgements::             Contributors and Sources of Inspiration

@detailmenu
--- The Detailed Node Listing ---

Available commands

* Virtual Buffers::              Buffers, bookmarks and recent files
* Editing::                      Commands useful for editing
* Navigation::                   Mark rings, outlines and imenu
* Search::                       Line search, grep and file search
* Compilation errors::           Jumping to compilation errors
* Histories::                    Navigating histories
* Major and minor modes::        Toggling minor modes and executing commands
* Miscellaneous::                Various other useful commands

Special features

* Live previews::                Preview the currently selected candidate
* Narrowing to subsets::         Restricting the completion to a candidate subset
* Asynchronous candidate lists:: Filtering asynchronously generated candidate lists
* Integration with Embark::      Actions, Grep/Occur-buffer export

Configuration

* Example configuration::        Configuration proposal based on use-package
* Customizable variables::       Short description of all customization settings
* Fine-tuning::                  Fine-grained configuration for special requirements

@end detailmenu
@end menu

@node Introduction
@chapter Introduction

@cindex introduction

Consult provides various handy commands based on the Emacs completion function
@samp{completing-read}, which allows to quickly select an item from a list of
candidates. Consult offers in particular a more advanced buffer switching
command @samp{consult-buffer} to switch to buffers and recently opened files. Various
search commands are provided, like an asynchronous @samp{consult-grep}, and
@samp{consult-line}, which resembles @uref{https://github.com/abo-abo/swiper#swiper, Swiper} or @uref{https://github.com/emacsorphanage/helm-swoop, Helm-Swoop}. Multiple of the offered
commands are greatly enhanced in comparison to their existing Emacs equivalents.
The command @samp{consult-imenu} presents a flat list of the Imenu with @ref{Live previews, , live preview}
and @ref{Narrowing to subsets, , narrowing support}. Please take a look at the @ref{Available commands, , full list of commands}!

All Consult commands are compatible with completion systems based on the
standard Emacs @samp{completing-read} API, notably the default completion system,
@uref{https://www.gnu.org/software/emacs/manual/html_node/emacs/Icomplete.html, Icomplete}, @uref{https://github.com/raxod502/selectrum, Selectrum} and @uref{https://github.com/oantolin/embark/, Embark}, with which Consult works out of the box. If
Icomplete is used, it is recommended to install @uref{https://github.com/oantolin/icomplete-vertical, Icomplete-vertical}. The
completion system specifics in this package are kept to a minimum. The ability
of the Consult commands to work well with arbitrary completion systems is one
main advantage of the package. This property allows Consult to fit well into
existing setups and it helps you to create a full completion environment out of
small and independent components. Note that, if you use @uref{https://github.com/abo-abo/swiper#ivy, Ivy} or @uref{https://github.com/emacs-helm/helm, Helm}, you
probably don't need Consult, since both packages already bring their own rich
set of additional commands.

There are the @uref{https://github.com/minad/marginalia/, Marginalia} and @uref{https://github.com/oantolin/embark/, Embark} packages, which can be combined with
Consult. The @samp{marginalia-mode} enriches the completion display with annotations.
The annotations show for example documentation strings or file information. The
versatile Embark packages provides local actions, comparable to a context menu,
which can be executed while selecting a candidate in the minibuffer or in other
contexts. For example, when selecting from a list of files, an action to delete
the file is offered. Embark offers more than local actions and can also be used
as a completion system through its live-updating candidate collect buffer. The
@ref{Integration with Embark, , Embark integration} is described later in greater detail.

@node Available commands
@chapter Available commands

@cindex commands

Most provided commands follow the meaningful naming scheme @samp{consult-<thing>}.

@strong{TIP:} If you have @uref{https://github.com/minad/marginalia, Marginalia} installed and heavy annotators enabled, type @samp{M-x
^consult} to see all Consult commands with their abbreviated description!
Alternatively, type @samp{C-h a ^consult} to get an overview of all Consult
variables and functions with their descriptions.

@menu
* Virtual Buffers::              Buffers, bookmarks and recent files
* Editing::                      Commands useful for editing
* Navigation::                   Mark rings, outlines and imenu
* Search::                       Line search, grep and file search
* Compilation errors::           Jumping to compilation errors
* Histories::                    Navigating histories
* Major and minor modes::        Toggling minor modes and executing commands
* Miscellaneous::                Various other useful commands
@end menu

@node Virtual Buffers
@section Virtual Buffers

@cindex virtual buffers

@findex consult-buffer
@findex consult-buffer-other-window
@findex consult-buffer-other-frame
@findex consult-recent-file
@findex consult-recent-file-other-window
@findex consult-recent-file-other-frame
@findex consult-bookmark
@itemize
@item
@samp{consult-buffer} (@samp{-other-window}, @samp{-other-frame}): Enhanced version
of @samp{switch-to-buffer} with support for virtual buffers. Supports live
preview and recursive editing while previewing. The command supports
narrowing. You can type @samp{f SPC} in order to narrow to recent files.
Ephemeral buffers can be shown by pressing @samp{SPC} - it works the same
way as @samp{switch-buffer}. Supported narrowing keys:

@itemize
@item
b Buffers
@item
f Files
@item
m Bookmarks
@item
p Project (only available if @samp{consult-project-root-function} is
configured as shown in the @ref{Example configuration, , example configuration})
@item
v Views (only available if @samp{consult-view-*-function} is
configured as shown in the @ref{Example configuration, , example configuration})
@end itemize
@item
@samp{consult-bookmark}: Select or create bookmark. You might consider the
powerful @samp{consult-buffer} instead as an alternative, which includes bookmarks.
However @samp{consult-bookmark} supports preview of bookmarks and narrowing.
@item
@samp{consult-recent-file} (@samp{-other-window}, @samp{-other-frame}): Select a
recent files. You might prefer the more powerful @samp{consult-buffer}
instead, which includes recent files.
@end itemize

@node Editing
@section Editing

@cindex editing

@findex consult-register
@findex consult-yank
@findex consult-kmacro
@itemize
@item
@samp{consult-register}: Select from list of registers. The command
supports narrowing to register types and preview of marker positions. This
command is useful to search the register contents. For quick access it is
recommended to use the built-in Emacs commands like @samp{jump-to-register}. There
is also the supplementary function @samp{consult-register-preview} which can be
used as @samp{register-preview-function} for a consistent display. See the @ref{Example configuration, , example
configuration} for how the @samp{consult-register-preview} function is meant to be
used.
@item
@samp{consult-yank}, @samp{consult-yank-pop}: Enhanced version of @samp{yank} and
@samp{yank-pop} which allows selecting from the kill-ring. Live preview is
supported when selecting from the kill-ring.
@item
@samp{consult-kmacro}: Select macro from the macro ring and execute it.
@item
@samp{consult-keep-lines}: Replacement for @samp{keep/flush-lines}
which uses the current completion style for filtering the buffer. The
function updates the buffer while typing. In particular, this function can be
used to further narrow an exported Embark collect buffer with the same
completion filtering as during @samp{completing-read}. If the input begins with
"! SPC", the filter matches the complement.
@item
@samp{consult-focus-lines}: Temporarily hide lines by filtering them using the current
completion style. Call with @samp{C-u} prefix argument in order to show the hidden
lines again. If the input begins with "! SPC", the filter matches the
complement. In contrast to @samp{consult-keep-lines} this function does not edit
the buffer.
@end itemize

@node Navigation
@section Navigation

@cindex navigation

@findex consult-goto-line
@findex consult-mark
@findex consult-global-mark
@findex consult-outline
@findex consult-imenu
@findex consult-project-imenu
@itemize
@item
@samp{consult-goto-line}: Jump to line number enhanced with live preview.
This is a drop-in replacement for @samp{goto-line}.
@item
@samp{consult-mark}: Jump to a marker in the @samp{mark-ring}. Supports live
preview and recursive editing.
@item
@samp{consult-global-mark}: Jump to a marker in the @samp{global-mark-ring}.
Supports live preview and recursive editing.
@item
@samp{consult-outline}: Jump to a heading of the outline. Supports live
preview and recursive editing.
@item
@samp{consult-imenu}: Jump to imenu item in the current buffer. Supports
live preview, recursive editing and narrowing.
@item
@samp{consult-project-imenu}: Jump to imenu item in project buffers, with
the same major mode as the current buffer. Supports live preview,
recursive editing and narrowing. This feature has been inspired by
@uref{https://github.com/vspinu/imenu-anywhere, imenu-anywhere}.
@end itemize

@node Search
@section Search

@cindex search

@findex consult-line
@findex consult-multi-occur
@findex consult-grep
@findex consult-ripgrep
@findex consult-git-grep
@findex consult-find
@findex consult-locate
@itemize
@item
@samp{consult-line}: Enter search string and select from matching lines.
Supports live preview and recursive editing. The symbol at point and
the recent isearch string are added to the "future history" and can be
accessed by pressing @samp{M-n}.
@item
@samp{consult-multi-occur}: Replacement for @samp{multi-occur} which uses
@samp{completing-read-multiple}.
@item
@samp{consult-grep}, @samp{consult-ripgrep}, @samp{consult-git-grep}: Search for
regular expression in current directory. Grep is invoked
asynchronously, while you enter the search term. You are required to
enter at least @samp{consult-async-min-input} characters in order for the
search to get started. The input string is split into two parts, if
the first character is a punctuation character, like @samp{#}. For example
@samp{#grep-regexp#filter-string}, is split at the second @samp{#}. The string
"grep-regexp" is passed to Grep, the "filter-string" is passed to
the @emph{fast} Emacs filtering to further narrow down the list of matches.
This is particularily useful if you are using an advanced completion
style like orderless. @samp{consult-grep} supports preview. If
@samp{consult-project-root-function} is @ref{Example configuration, , configured} and the function returns
non-nil, @samp{consult-grep} searches the current project directory.
Otherwise the @samp{default-directory} is searched. If @samp{consult-grep} is
invoked with prefix argument, you can specify the directory manually,
i.e., @samp{C-u M-s g}.
@item
@samp{consult-find}, @samp{consult-locate}: Find file by
matching the path against a regexp. Like @samp{consult-grep} either the
project root or the current directory is used as root directory for
the search. The input string is treated similarly to @samp{consult-grep},
where the first part is passed to find, and the second part is used
for Emacs filtering. Note that @samp{find} uses wildcards, e.g. enter
@samp{*consult*}, to find all files containing the string "consult". In
case you want to use another search utility like @samp{fd}, you can write
wrapper command @samp{my-fdfind} as shown in the @ref{Example configuration, , example configuration}.
@end itemize

@node Compilation errors
@section Compilation errors

@cindex compilation errors

@findex consult-error
@findex consult-flycheck
@findex consult-flymake
@itemize
@item
@samp{consult-error}: Jump to an error. Supports live preview and recursive
editing. In contrast to @samp{consult-flycheck} it shows the line and is
more general since it is not tied to a specific backend.
@item
@samp{consult-flycheck}: Jump to flycheck error. Supports live preview and
recursive editing. The command supports narrowing. Press @samp{e SPC},
@samp{w SPC}, @samp{i SPC} to only show errors, warnings and infos respectively.
This command requires to install the additional @samp{consult-flycheck.el}
package since the main @samp{consult.el} package only depends on Emacs core
components.
@item
@samp{consult-flymake}: Jump to Flymake diagnostic, like
@samp{consult-flycheck}.
@end itemize

@node Histories
@section Histories

@cindex history

@findex consult-complex-command
@findex consult-history
@itemize
@item
@samp{consult-complex-command}: Select a command from the
@samp{command-history}. This command is a @samp{completing-read} version of
@samp{repeat-complex-command} and can also be considered a replacement for
the @samp{command-history} command from chistory.el.
@item
@samp{consult-history}: Insert a string from the current buffer history.
This command can be invoked from the minibuffer. In that case the
history stored in the @samp{minibuffer-history-variable} is used.
@end itemize

@node Major and minor modes
@section Major and minor modes

@cindex minor mode
@cindex major mode

@findex consult-minor-mode-menu
@findex consult-mode-command
@itemize
@item
@samp{consult-minor-mode-menu}: Enable/disable minor mode. Supports
narrowing to on/off/local/global modes by pressing @samp{i/o/l/g SPC}
respectively.
@item
@samp{consult-mode-command}: Run a command from the currently active minor
or major modes. Supports narrowing to local-minor/global-minor/major
mode via the keys @samp{l/g/m}.
@end itemize

@node Miscellaneous
@section Miscellaneous

@findex consult-apropos
@findex consult-file-externally
@findex consult-completion-in-region
@findex consult-theme
@itemize
@item
@samp{consult-apropos}: Replacement for @samp{apropos} with completion.
@item
@samp{consult-man}: Find Unix man page, via Unix @samp{apropos} or @samp{man -k}.
The selected man page is opened using the Emacs @samp{man} command.
@item
@samp{consult-file-externally}: Select a file and open it externally,
e.g. using @samp{xdg-open} on Linux.
@item
@samp{consult-completion-in-region}: Function which can be used as
@samp{completion-in-region-function}. This way, the minibuffer completion
UI will be used for @samp{completion-at-point}. This function is
particularily useful in combination with Icomplete-vertical, since
Icomplete does not provide its own @samp{completion-in-region-function}. In
contrast, Selectrum already comes with its own function.
@item
@samp{consult-theme}: Select a theme and disable all currently enabled
themes. Supports live preview of the theme while scrolling through the
candidates.
@end itemize

@node Special features
@chapter Special features

Consult enhances @samp{completing-read} with live previews of candidates, additional
narrowing capabilities to candidate subsets and asynchronously generated
candidate lists. This functionality is provided by the internal @samp{consult--read}
function, which is used by most Consult commands. The @samp{consult--read} function
is a thin wrapper around @samp{completing-read}. This allows Consult to work with
different completion systems in the backend, while still offering more advanced
features.

@menu
* Live previews::                Preview the currently selected candidate
* Narrowing to subsets::         Restricting the completion to a candidate subset
* Asynchronous candidate lists:: Filtering asynchronously generated candidate lists
* Integration with Embark::      Actions, Grep/Occur-buffer export
@end menu

@node Live previews
@section Live previews

@cindex preview

Some Consult commands support live previews. For example when you scroll
through the items of @samp{consult-line}, the buffer will scroll to the
corresponding position. It is possible to jump back and forth between the
minibuffer and the buffer to perform recursive editing while the search is
ongoing.

Previews are enabled by default but can be disabled via the
@samp{consult-preview-key} variable. Furthermore it is possible to specify
keybindings which trigger the preview manually as shown in the @ref{Example configuration, , example
configuration}. The default setting of @samp{consult-preview-key} is @samp{'any} which
means that the preview will be triggered on any keypress when the selected
candidate changes. Each command can be configured individually with its own
@samp{:preview-key}, such that preview can be manual for some commands, for some
commands automatic and for some commands completely disabled.

@node Narrowing to subsets
@section Narrowing to subsets

@cindex narrowing

Consult has special support to narrow to candidate subsets. This functionality
is useful if the list of candidates consists of candidates of multiple types or
candidates from multiple sources, like the @samp{consult-buffer} command, which
shows both buffers and recently opened files.

When you use the @samp{consult-buffer} command, you can press @samp{b SPC} and the list
of candidates will be restricted such that only buffers are shown. If you press
@samp{DEL} afterwards, the full candidate list will be shown again. Furthermore a
narrowing prefix key and a widening key can be configured which can be pressed
to achieve the same effect, see the configuration variables
@samp{consult-narrow-key} and @samp{consult-widen-key}.

If @uref{https://github.com/justbur/emacs-which-key, which-key} is installed, the possible narrowing keys are shown in the
which-key window after pressing the prefix key @samp{consult-narrow-key}.
Furthermore there is the @samp{consult-narrow-help} command which can be bound to a
key in the @samp{consult-narrow-map} if this is desired, as shown in the @ref{Example configuration, , example
configuration}.

@node Asynchronous candidate lists
@section Asynchronous candidate lists

@cindex asynchronous candidates

Consult has support for asynchronous generation of candidate lists. This
feature is used for example by @samp{consult-grep}, where the list of matches is
generated dynamically while the user is typing a grep regular expression. The
grep process is executed in the background. When modifying the grep regular
expression, the background process is terminated and a new process is started
with the modified regular expression.

The matches, which have been found, can then be narrowed using the installed
Emacs completion-style. This can be very powerful if you are using for example
the @samp{orderless} completion style.

This two-level filtering is possible by splitting the input string. Part of the
input string is treated as input to grep and part of the input is used for
filtering. The input string is split at a punctuation character, using a
similar syntax as Perl regular expressions.

Examples:

@itemize
@item
@samp{#defun}: Search for "defun" using grep.
@item
@samp{#defun#consult}: Search for "defun" using grep, filter with the word
"consult".
@item
@samp{/defun/consult}: It is also possible to use other punctuation
characters.
@item
@samp{#to#}: Force searching for "to" using grep, since the grep pattern
must be longer than @samp{consult-async-min-input} characters by default.
@item
@samp{#defun -- --invert-match#}: Pass argument @samp{--invert-match} to grep.
@end itemize

For asynchronous processes like @samp{find} and @samp{grep}, the prompt has a small
indicator showing the process status:

@itemize
@item
@samp{:} the usual prompt colon, before input is provided.
@item
@samp{*} with warning face, the process is running.
@item
@samp{:} with success face, success, process exited with an error code of zero.
@item
@samp{!} with error face, failure, process exited with a nonzero error code.
@item
@samp{;} with error face, interrupted, for example if more input is provided.
@end itemize

There is an ephemeral error log buffer @samp{_*consult-async-stderr*} (note the leading space!),
you can access the buffer using @samp{consult-buffer} and @samp{switch-to-buffer} by first pressing @samp{SPC}
and then selecting the buffer.

@node Integration with Embark
@section Integration with Embark

@cindex embark

@strong{NOTE}: Please install the @samp{embark-consult} package from MELPA, which provides
Consult-specific Embark actions and the Occur buffer export.

Embark is a versatile package which offers context dependent actions,
comparable to a context menu. See the @uref{https://github.com/oantolin/embark, Embark manual} for an extensive
description of its capabilities.

Actions are commands which can operate on the currently selected candidate (or
target in Embark terminology). When completing files, for example the
@samp{delete-file} command is offered. Embark also allows to to execute arbitrary
commands on the currently selected candidate via @samp{M-x}.

Furthermore Embark provides the @samp{embark-collect-snapshot} command, which
collects candidates and presents them in an Embark collect buffer, where
further actions can be applied to them. A related feature is the
@samp{embark-export} command, which allows to export candidate lists to a buffer of
a special type. For example in the case of file completion, a Dired buffer is
opened.

In the context of Consult, particularily exciting is the possibility to export
the matching lines from @samp{consult-line}, @samp{consult-outline}, @samp{consult-mark} and
@samp{consult-global-mark}. The matching lines are exported to an Occur buffer where
they can be edited via the @samp{occur-edit-mode} (press key @samp{e}). Similarily,
Embark supports exporting the matches found by @samp{consult-grep},
@samp{consult-ripgrep} and @samp{consult-git-grep} to a Grep buffer, where the matches
across files can be edited, if the @uref{https://github.com/mhayashi1120/Emacs-wgrep, wgrep} package is installed.

@node Configuration
@chapter Configuration

@cindex installation

Consult can be installed from @uref{https://melpa.org/, MELPA} via the Emacs built-in package manager.
Alternatively it can be directly installed from the development repository via
other non-standard package managers.

It is recommended to manage package configurations with the excellent
@samp{use-package} macro. The Consult package only provides commands and does not add
any keybindings or modes. In order to use the Consult commands, you must
configure the keybindings yourself. As a result, the package is not intrusive
but requires a little setup effort. Feel free to only bind the commands you
consider useful to your workflow!

Note that there are two packages as of now: @samp{consult} and @samp{consult-flycheck}.
@samp{consult-flycheck} is a separate package such that the core @samp{consult} package
only depends on Emacs core components. The @samp{consult} package will work out of
the box with the default completion, Icomplete and Selectrum.

@menu
* Example configuration::        Configuration proposal based on use-package
* Customizable variables::       Short description of all customization settings
* Fine-tuning::                  Fine-grained configuration for special requirements
@end menu

@node Example configuration
@section Example configuration

@cindex configuration
@cindex use-package

@lisp
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-keep-lines)
         ("C-c f" . consult-focus-lines)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)
         ("C-x b" . consult-buffer)
         ("C-x 4 b" . consult-buffer-other-window)
         ("C-x 5 b" . consult-buffer-other-frame)
         ("C-x r x" . consult-register)
         ("C-x r b" . consult-bookmark)
         ;; M-g bindings (goto-map)
         ("M-g g" . consult-goto-line)
         ("M-g M-g" . consult-goto-line)
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-project-imenu) ;; Alternative: consult-imenu
         ("M-g e" . consult-error)
         ;; M-s bindings (search-map)
         ("M-s g" . consult-git-grep)      ;; Alternatives: consult-grep, consult-ripgrep
         ("M-s f" . consult-find)          ;; Alternatives: consult-locate, my-fdfind
         ("M-s l" . consult-line)
         ("M-s m" . consult-multi-occur)
         ;; Other bindings
         ("M-y" . consult-yank-pop)
         ("<help> a" . consult-apropos))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Custom command wrappers. It is generally encouraged to write your own
  ;; commands based on the Consult commands. Some commands have arguments which
  ;; allow tweaking. Furthermore global configuration variables can be set
  ;; locally in a let-binding.
  (defun my-fdfind (&optional dir)
    (interactive "P")
    (let ((consult-find-command '("fdfind" "--color=never" "--full-path")))
      (consult-find dir)))

  ;; Replace `multi-occur' with `consult-multi-occur', which is a drop-in replacement.
  (fset 'multi-occur #'consult-multi-occur)

  ;; Configure register preview function.
  ;; This gives a consistent display for both `consult-register' and
  ;; the register preview when editing registers.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-preview)

  ;; Configure other variables and modes in the :config section, after lazily loading the package
  :config

  ;; Configure preview. Note that the preview-key can also be configured on a
  ;; per-command basis via `consult-config'.
  ;; The default value is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-p"))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))

  ;; Optionally configure narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")
  ;; Optionally make narrowing help available in the minibuffer.
  ;; Probably not needed if you are using which-key.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; Optional configure a view library to be used by `consult-buffer'.
  ;; The view library must provide two functions, one to open the view by name,
  ;; and one function which must return a list of views as strings.
  ;; Example: https://github.com/minad/bookmark-view/
  ;; (setq consult-view-open-function #'bookmark-jump
  ;;       consult-view-list-function #'bookmark-view-names)

  ;; Optionally configure a function which returns the project root directory
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root))

;; Optionally add the `consult-flycheck' command.
(use-package consult-flycheck
  :bind (:map flycheck-command-map
              ("!" . consult-flycheck)))
@end lisp

@node Customizable variables
@section Customizable variables

@cindex customization
@cindex configuration

@strong{TIP:} If you have @uref{https://github.com/minad/marginalia, Marginalia} installed, type @samp{M-x customize-variable RET
 ^consult} to see all Consult-specific customizable variables with their current
values and abbreviated description! Alternatively, type @samp{C-h a ^consult} to get
an overview of all Consult variables and functions with their descriptions.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Variable
@tab Default
@tab Description
@item consult-after-jump-hook
@tab '(recenter)
@tab Functions to call after jumping to a location
@item consult-async-default-split
@tab "#"
@tab Separator character used for splitting #async#filter
@item consult-async-input-debounce
@tab 0.25
@tab Input debounce for asynchronous commands
@item consult-async-input-throttle
@tab 0.5
@tab Input throttle for asynchronous commands
@item consult-async-min-input
@tab 3
@tab Minimum numbers of letters needed for async process
@item consult-async-refresh-delay
@tab 0.25
@tab Refresh delay for asynchronous commands
@item consult-bookmark-narrow
@tab @dots{}
@tab Narrowing configuration for @samp{consult-bookmark}
@item consult-buffer-filter
@tab @dots{}
@tab Filter for @samp{consult-buffer}
@item consult-config
@tab nil
@tab Invididual command option configuration
@item consult-find-command
@tab '(@dots{})
@tab Command line arguments for find
@item consult-fontify-max-size
@tab 1048576
@tab Buffers larger than this limit are not fontified
@item consult-git-grep-command
@tab '(@dots{})
@tab Command line arguments for git-grep
@item consult-goto-line-numbers
@tab t
@tab Show line numbers for @samp{consult-goto-line}
@item consult-grep-command
@tab '(@dots{})
@tab Command line arguments for grep
@item consult-imenu-narrow
@tab @dots{}
@tab Mode-specific narrowing keys for @samp{consult-imenu}
@item consult-imenu-toplevel
@tab @dots{}
@tab Mode-specific toplevel names used by @samp{consult-imenu}
@item consult-line-numbers-widen
@tab t
@tab Show absolute line numbers when narrowing is active.
@item consult-line-point-placement
@tab 'match-beginning
@tab Placement of the point used by @samp{consult-line}
@item consult-locate-command
@tab '(@dots{})
@tab Command line arguments for locate
@item consult-mode-command-filter
@tab @dots{}
@tab Filter for @samp{consult-mode-command}
@item consult-mode-histories
@tab @dots{}
@tab Mode-specific history variables
@item consult-narrow-key
@tab nil
@tab Narrowing prefix key during completion
@item consult-preview-key
@tab 'any
@tab Keys which triggers preview
@item consult-preview-max-count
@tab 10
@tab Maximum number of files to keep open during preview
@item consult-preview-max-size
@tab 10485760
@tab Size limit for previewed files
@item consult-project-root-function
@tab nil
@tab Function which returns current project root
@item consult-register-narrow
@tab @dots{}
@tab Narrowing configuration for @samp{consult-register}
@item consult-ripgrep-command
@tab '(@dots{})
@tab Command line arguments for ripgrep
@item consult-themes
@tab nil
@tab List of themes to be presented for selection
@item consult-view-list-function
@tab nil
@tab Function which returns a list of view names as strings
@item consult-view-open-function
@tab nil
@tab Function to open a view by name
@item consult-widen-key
@tab nil
@tab Widening key during completion
@end multitable

@node Fine-tuning
@section Fine-tuning of individual commands

@cindex configuration

@strong{NOTE:} Consult allows fine-grained customization of individual commands. This
configuration feature is made available for experienced users with special
requirements.

Commands allow flexible, individual customization by setting the
@samp{consult-config} list. You can override any option passed to the internal
@samp{consult--read} API@. Note that since @samp{consult--read} is part of the internal
API, options could be removed, replaced or renamed at any time.

Useful options are:
@itemize
@item
@samp{:preview-key} set the preview key, default is @samp{consult-preview-key}
@item
@samp{:initial} set the initial input
@item
@samp{:default} set the default value
@item
@samp{:history} set the history variable symbol
@item
@samp{:add-history} add items to the future history, for example symbol at point
@item
@samp{:sort} enable or disable sorting
@end itemize

@lisp
;; Set preview for `consult-buffer' to key `M-p'
;; and disable preview for `consult-theme' completely.
;; For `consult-line' specify multiple keybindings.
;; Note that you should bind the <S-up> and <S-down> in the
;; `minibuffer-local-completion-map' or `selectrum-minibuffer-map'
;; to the commands which select the previous or next candidate!
(setq consult-config `((consult-theme :preview-key nil)
                       (consult-buffer :preview-key ,(kbd "M-p"))
                       (consult-line :preview-key (list ,(kbd "<S-down>") ,(kbd "<S-up>")))))
@end lisp

Generally it is possible to modify commands for your individual needs by the
following techniques:

@enumerate
@item
Create your own wrapper function which passes modified arguments to the Consult functions.
@item
Modify @samp{consult-config} in order to change the @samp{consult--read} settings.
@item
Create advices to modify some internal behavior.
@item
Write or propose a patch!
@end enumerate

@node Recommended packages
@chapter Recommended packages

It is recommended to install the following package combination:

@itemize
@item
consult: This package
@item
consult-flycheck: Provides the consult-flycheck command
@item
@uref{https://github.com/raxod502/selectrum, selectrum} or @uref{https://github.com/oantolin/icomplete-vertical, icomplete-vertical}: Vertical completion systems
@item
@uref{https://github.com/minad/marginalia, marginalia}: Annotations for the completion candidates
@item
@uref{https://github.com/oantolin/embark, embark and embark-consult}: Action commands, which can act on the completion candidates
@item
@uref{https://github.com/oantolin/orderless, orderless}: Completion style, Flexible candidate filtering
@item
@uref{https://github.com/raxod502/prescient.el, prescient}: Frecency-based candidate sorting, also offers filtering
@end itemize

Additional recommended packages for wider integration:

@itemize
@item
@uref{https://github.com/justbur/emacs-which-key, which-key}: Helpful mode showing keybindings, also shows the Consult narrowing keys
@item
@uref{https://github.com/mhayashi1120/Emacs-wgrep, wgrep}: Editing of grep buffers, can be used together with @samp{consult-grep} via Embark
@end itemize

Note that all packages are independent and can potentially be exchanged
with alternative components, since there exist no hard dependencies.
Furthermore it is possible to get started with only Selectrum and
Consult and add more components later to the mix.

@node Acknowledgements
@chapter Acknowledgements

You probably guessed from the name that this package took inspiration from
@uref{https://github.com/abo-abo/swiper#counsel, Counsel} by Oleh Krehel. Some of the Consult commands originated in the @uref{https://github.com/raxod502/selectrum/wiki/Useful-Commands, Selectrum
wiki}. The commands have been rewritten and greatly enhanced in comparison to the
wiki versions. In particular all Selectrum-specific code has been removed, such
that the commands are compatible with the @samp{completing-read} API@.

Consult is intended to be a community effort, please participate in the
discussions. Contributions are very welcome. If you have a proposal, take a look
at the @uref{https://github.com/minad/consult/issues/6, Consult wishlist}.

Code contributions:
@itemize
@item
@uref{https://github.com/oantolin/, Omar Antolín Camarena}
@item
@uref{https://github.com/s-kostyaev/, Sergey Kostyaev}
@item
@uref{https://github.com/okamsn/, okamsn}
@item
@uref{https://github.com/clemera/, Clemens Radermacher}
@item
@uref{https://github.com/tomfitzhenry/, Tom Fitzhenry}
@item
@uref{https://github.com/jakanakaevangeli, jakanakaevangeli}
@item
@uref{https://github.com/inigoserna/, inigoserna}
@item
@uref{https://github.com/aspiers/, Adam Spiers}
@item
@uref{https://github.com/omar-polo, Omar Polo}
@end itemize

Advice and useful discussions:
@itemize
@item
@uref{https://github.com/clemera/, Clemens Radermacher}
@item
@uref{https://github.com/oantolin/, Omar Antolín Camarena}
@item
@uref{https://gitlab.com/protesilaos/, Protesilaos Stavrou}
@item
@uref{https://github.com/purcell/, Steve Purcell}
@item
@uref{https://github.com/alphapapa/, Adam Porter}
@item
@uref{https://github.com/manuel-uberti/, Manuel Uberti}
@item
@uref{https://github.com/tomfitzhenry/, Tom Fitzhenry}
@item
@uref{https://github.com/hmelman/, Howard Melman}
@end itemize

@bye